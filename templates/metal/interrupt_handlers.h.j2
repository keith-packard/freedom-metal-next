/* Copyright 2020 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#ifndef __INTERRUPT_HANDLERS_H
#define __INTERRUPT_HANDLERS_H

#include <metal/cpu.h>
#include <metal/interrupt.h>

{% if harts|length > 1 and 'mmu_type' in harts[1] %}
#define __METAL_NUM_EXCEPTIONS 16
{% elif 'mmu_type' in harts[0] %}
#define __METAL_NUM_EXCEPTIONS 16
{% else %}
#define __METAL_NUM_EXCEPTIONS 12
{% endif %}

{% if local_interrupts is defined %}
#define __METAL_NUM_LOCAL_INTERRUPTS {{ 16 + local_interrupts.irqs|length }}
{% else %}
#define __METAL_NUM_LOCAL_INTERRUPTS 16
{% endif %}

/*!
 * @brief Function signature for interrupt callback handlers
 */
typedef void (*metal_interrupt_handler_t)();

/*!
 * @brief Function signature for exception handlers
 */
typedef void (*metal_exception_handler_t)(struct metal_cpu cpu, int ecode);


const metal_exception_handler_t __metal_exception_table[__METAL_NUM_EXCEPTIONS];
const metal_interrupt_handler_t __metal_local_interrupt_table[__METAL_NUM_LOCAL_INTERRUPTS];

void __metal_exception_handler();

void metal_exception_instruction_address_misaligned_handler(struct metal_cpu cpu, int ecode);
void metal_exception_instruction_address_fault_handler(struct metal_cpu cpu, int ecode);
void metal_exception_illegal_instruction_handler(struct metal_cpu cpu, int ecode);
void metal_exception_breakpoint_handler(struct metal_cpu cpu, int ecode);
void metal_exception_load_address_misaligned_handler(struct metal_cpu cpu, int ecode);
void metal_exception_load_access_fault_handler(struct metal_cpu cpu, int ecode);
void metal_exception_store_amo_address_misaligned_handler(struct metal_cpu cpu, int ecode);
void metal_exception_store_amo_access_fault_handler(struct metal_cpu cpu, int ecode);
void metal_exception_ecall_from_u_mode_handler(struct metal_cpu cpu, int ecode);
void metal_exception_ecall_from_s_mode_handler(struct metal_cpu cpu, int ecode);
void metal_exception_default_handler(struct metal_cpu cpu, int ecode);
void metal_exception_ecall_from_m_mode_handler(struct metal_cpu cpu, int ecode);
void metal_exception_instruction_page_fault(struct metal_cpu cpu, int ecode);
void metal_exception_load_page_fault(struct metal_cpu cpu, int ecode);
void metal_exception_store_amo_page_fault(struct metal_cpu cpu, int ecode);

#ifdef METAL_HLIC_VECTORED
void metal_riscv_cpu_intc_default_handler() __attribute__((interrupt));
void metal_riscv_cpu_intc_msip_handler() __attribute__((interrupt));
void metal_riscv_cpu_intc_mtip_handler() __attribute__((interrupt));
{% if global_interrupts is defined %}
void metal_riscv_plic0_source_0_handler() __attribute__((interrupt));
{% else %}
void metal_riscv_cpu_intc_meip_handler() __attribute__((interrupt));
{% endif %}
{% if local_interrupts is defined %}
{% for irq in local_interrupts.irqs %}
void metal_{{ to_snakecase(irq.source.compatible) }}_source_{{ irq.source.id }}_handler() __attribute__((interrupt));
{% endfor %}
{% endif %}
#else
void metal_riscv_cpu_intc_default_handler();
void metal_riscv_cpu_intc_msip_handler();
void metal_riscv_cpu_intc_mtip_handler();
{% if global_interrupts is defined %}
void metal_riscv_plic0_source_0_handler();
{% else %}
void metal_riscv_cpu_intc_meip_handler();
{% endif %}
{% if local_interrupts is defined %}
{% for irq in local_interrupts.irqs %}
void metal_{{ to_snakecase(irq.source.compatible) }}_source_{{ irq.source.id }}_handler();
{% endfor %}
{% endif %}
#endif

{% if global_interrupts is defined %}
{% for irq in global_interrupts.irqs %}
void metal_{{ to_snakecase(irq.source.compatible) }}_source_{{ irq.source.id }}_handler();
{% endfor %}
{% endif %}

#endif 
