/* Copyright 2020 SiFive, Inc */
/* SPDX-License-Identifier: Apache-2.0 */

#ifndef METAL__DRIVERS__SIFIVE_FE310_G000_PLL_CLOCK_H
#define METAL__DRIVERS__SIFIVE_FE310_G000_PLL_CLOCK_H

{% include 'template_comment.h.j2' %}

#include <metal/clock.h>
#include <metal/drivers/sifive_fe310_g000_hfrosc.h>
#include <metal/drivers/sifive_fe310_g000_hfxosc.h>
#include <metal/uart.h>
#include <stdbool.h>

{% if 'sifive,fe310-g000,pll' in devices %}
{% set sifive_fe310_g000_plls = devices['sifive,fe310-g000,pll'] %}

#define __METAL_DT_NUM_SIFIVE_FE310_G000_PLLS {{ sifive_fe310_g000_plls|length }}

static const struct dt_sifive_fe310_g000_pll_clock_data {
	uint64_t init_rate;
	uintptr_t config;
	uintptr_t divider;
	bool has_hfxosc;
	struct metal_clock hfrosc;
	struct metal_clock hfxosc;
} dt_clock_data[__METAL_DT_NUM_SIFIVE_FE310_G000_PLLS] = {
	{% for clk in sifive_fe310_g000_plls %}
	{
		.init_rate = {{ clk.clock_frequency[0] }},
		.config = {{ clk.regs_by_name["config"][0] }},
		.divider = {{ clk.regs_by_name["divider"][0] }},

	{% if "pllref" in clk.clock_names %}
		.has_hfxosc = true,
		/* {{ clk.clocks_by_name["pllref"].compatible[0] }} */
		.hfxosc = (struct metal_clock) { {{ clk.clocks_by_name["pllref"].id }} },
	{% else %}
		.has_hfxosc = false,
	{% endif %}
		/* {{ clk.clocks_by_name["pllsel0"].compatible[0] }} */
		.hfrosc = (struct metal_clock) { {{ clk.clocks_by_name["pllsel0"].id }} },
	},
	{% endfor %}
};

{% if 'uart' in default_drivers and default_drivers['uart'] in devices %}
{% set uarts = devices[default_drivers['uart']] %}
void _{{ to_snakecase(uarts[0].compatible[0]) }}_pre_rate_change_callback(struct metal_uart uart);
void _{{ to_snakecase(uarts[0].compatible[0]) }}_post_rate_change_callback(struct metal_uart uart);
{% endif %}

static __inline__ void pre_rate_change_callbacks() {
{% if sifive_fe310_g000_plls|length == 1 %}
    {% if uarts is defined and uarts[0].clocks[0].compatible[0] == "sifive,fe310-g000,pll" %}
        {% for uart in uarts %}
	_{{ to_snakecase(uarts[0].compatible[0]) }}_pre_rate_change_callback((struct metal_uart) { {{ uart.id }} });
	{% endfor %}
    {% endif %}
{% endif %}
}

static __inline__ void post_rate_change_callbacks() {
{% if sifive_fe310_g000_plls|length == 1 %}
    {% if uarts is defined and uarts[0].clocks[0].compatible[0] == "sifive,fe310-g000,pll" %}
        {% for uart in uarts %}
	_{{ to_snakecase(uarts[0].compatible[0]) }}_post_rate_change_callback((struct metal_uart) { {{ uart.id }} });
		{% endfor %}
	{% endif %}
{% endif %}
}

{% endif %}

#endif
